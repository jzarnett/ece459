@book{swps,
 author = {Henry H. Liu},
 title = {Software Performance and Scalability: A Quantitative Approach},
 year = {2009},
 isbn = {978-0-470-46253},
 publisher = {John Wiley \& Sons}
}

@book{mte241,
 author = {Douglas Wilhelm Harder and Jeff Zarnett and Vajih Montaghami and Allyson Giannikouris},
 title = {A Practical Introduction to Real-Time Systems for Undergraduate Engineering},
 year = {2015},
 howpublished = { \url {https://ece.uwaterloo.ca/~dwharder/icsrts/Lecture\_materials/A\_practical\_introduction\_to\_real-time\_systems\_for\_undergraduate\_engineering.pdf} },
 note = {Online; version 0.15.08.17}
}

@misc{cafgithub,
 author = {Julia Evans and Kamal Marhubi},
 title = {Do you know how much your computer can do in a second?},
 year = {2015},
 url = {http://computers-are-fast.github.io/},
 note = {Online; accessed 28-October-2015}
}

@InProceedings{cpu2006,
  author = 		 {A. Kejariwal and A.V. Veidenbaum and A. Nicolau and X. Tian and M. Girkar and H. Saito and U. Banerjee},
  title = 		 {{Comparative architectural characterization of SPEC CPU2000 and CPU2006 benchmarks on the Intel Core 2 Duo processor}},
  booktitle = {Proceedings, International Conference on Embedded Computer Systems: Architectures, Modeling, and Simulation; SAMOS},
  year = 	 {2008}
}

@book{osc,
 author = {Abraham Silberschatz and Peter Baer Galvin and Greg Gagne},
 title = {Operating System Concepts (9th Edition)},
 year = {2013},
 isbn = {978-1118063330},
 publisher = {John Wiley \& Sons},
} 

@book{osi,
 author = {William Stallings},
 title = {Operating Systems Internals and Design Principles (8th Edition)},
 year = {2014},
 isbn = {978-0133805913},
 publisher = {Prentice Hall},
} 

@misc{mispredict,
 author = {Michael Kerrisk},
 title = {How much do \_\_builtin\_expect(), likely(), and unlikely() improve performance?},
 year = {2012},
 url = {http://blog.man7.org/2012/10/how-much-do-builtinexpect-likely-and.html},
 note = {Online; accessed 12-November-2015}
}

@misc{extremescaling,
 author = {Richard McDougall},
 title = {Extreme Software Scaling},
 year = {2005},
 url = {http://queue.acm.org/detail.cfm?id=1095419},
 note = {Online; accessed 14-November-2015}
}

@misc{bigocheatsheet,
 author = {Eric Rowell and others},
 title = {Know Thy Complexities!},
 year = {2015},
 url = {http://bigocheatsheet.com/},
 note = {Online; accessed 14-November-2015}
}

@InProceedings{machThreads,
  author = 		 {Avadis Tevanian and Richard F. Rashid and David B. Golub and David L. Black and Eric Cooper and Michael W. Young},
  title = 		 {Mach Threads and the {UNIX} Kernel: The Battle for Control},
  booktitle = {Proceedings, Summer 1987 USENIX Conference},
  year = 	 {1987}
}

@book{insideOS2,
 author = {Gordon Letwin},
 title = {Inside {OS/2}},
 year = {1988},
 publisher = {Microsoft Press},
 isbn = {978-1556151170}
}

@misc{pthreads,
 author = {Blaise Barney},
 title = {{POSIX Threads Programming}},
 year = {2014},
 url = {https://computing.llnl.gov/tutorials/pthreads/},
 note = {Online; accessed 1-March-2015}
}

@book{mos,
 author = {Andrew S. Tanenbaum},
 title = {Modern Operating Systems, 3rd Edition},
 year = {2008},
 isbn = {978-01360066332},
 publisher = {Prentice Hall}
}

@inproceedings{Attiya:2011:LOE:1926385.1926442,
 author = {Attiya, Hagit and Guerraoui, Rachid and Hendler, Danny and Kuznetsov, Petr and Michael, Maged M. and Vechev, Martin},
 title = {Laws of order: expensive synchronization in concurrent algorithms cannot be eliminated},
 booktitle = {Proceedings of the 38th annual ACM SIGPLAN-SIGACT symposium on Principles of programming languages},
 series = {POPL '11},
 year = {2011},
 isbn = {978-1-4503-0490-0},
 location = {Austin, Texas, USA},
 pages = {487--498},
 numpages = {12},
 url = {http://doi.acm.org/10.1145/1926385.1926442},
 acmid = {1926442},
 publisher = {ACM},
 address = {New York, NY, USA},
 keywords = {algorithms, concurrency, lower bounds, memory barriers, memory fences},
} 

@Misc{mckenney11:_concur,
  author = 	 {Paul McKenney},
  title = 	 {Concurrent code and expensive instructions},
  howpublished = {Linux Weekly News, \url{http://lwn.net/Articles/423994/}},
  month = 	 {January},
  year = 	 2011
}


@misc{solarisstudio,
    author = {Oracle},
    title = {{Oracle Solaris Studio 12 Documentation}},
    year = {2014},
    url = {http://www.oracle.com/technetwork/documentation/solaris-studio-12-192994.html},
    note = {Online; accessed 15-November-2015}
}

@misc{java:threadpoolexecutor,
    author = {Oracle},
    title = {{Class ThreadPoolExecutor}},
    year = {2010},
    url = {http://download.oracle.com/javase/1.5.0/docs/api/java/util/concurrent/ThreadPoolExecutor.html},
    note = {Online; accessed 15-November-2015}
}

@misc{csharp:threadpool,
    author = {Microsoft Corporation},
    title = {{How to Use a Thread Pool (C\# Programming Guide)}},
    year = {2005},
    url = {http://msdn.microsoft.com/en-us/library/3dasc8as%28v=vs.80%29.aspx},
    note = {Online; accessed 15-November-2015}
}

@misc{gnome:threadpool,
    author = {{The GNOME Project}},
    title = {Thread Pools},
    year = {2015},
    url = {http://library.gnome.org/devel/glib/unstable/glib-Thread-Pools.html},
    note = {Online; accessed 15-November-2015}
}

@article{Ayguade:2009:DOT:1512157.1512430,
 author = {Ayguad\'{e}, Eduard and Copty, Nawal and Duran, Alejandro and Hoeflinger, Jay and Lin, Yuan and Massaioli, Federico and Teruel, Xavier and Unnikrishnan, Priya and Zhang, Guansong},
 title = {The Design of {OpenMP} Tasks},
 journal = {IEEE Trans. Parallel Distrib. Syst.},
 volume = {20},
 issue = {3},
 month = {March},
 year = {2009},
 issn = {1045-9219},
 pages = {404--418},
 numpages = {15},
 url = {http://portal.acm.org/citation.cfm?id=1512157.1512430},
 acmid = {1512430},
 publisher = {IEEE Press},
 address = {Piscataway, NJ, USA},
 keywords = {Concurrent, distributed, and parallel languages, Concurrent Programming, Concurrent programming structures},
} 

@inproceedings{Cantrill:2004:DIP:1247415.1247417,
 author = {Cantrill, Bryan M. and Shapiro, Michael W. and Leventhal, Adam H.},
 title = {Dynamic instrumentation of production systems},
 booktitle = {Proceedings of the annual conference on USENIX Annual Technical Conference},
 series = {ATEC '04},
 year = {2004},
 location = {Boston, MA},
 pages = {15--28},
 url = {http://portal.acm.org/citation.cfm?id=1247415.1247417},
 acmid = {1247417},
 publisher = {USENIX Association},
 address = {Berkeley, CA, USA},
} 

@InProceedings{Rinard:2010:PSA:1932682.1869525,
 author = {Rinard, Martin and Hoffmann, Henry and Misailovic, Sasa and Sidiroglou, Stelios},
 title = {Patterns and statistical analysis for understanding reduced resource computing},
 booktitle = {Proceedings of Onward! 2010},
 month = {October},
 year = {2010},
 pages = {806--821},
 numpages = {16},
 url = {http://doi.acm.org/10.1145/1932682.1869525},
 acmid = {1869525},
 publisher = {ACM},
 address = {Reno/Tahoe, NV, USA},
 keywords = {cyclic memory allocation, discarding tasks, loop perforation, reduced resource computing, statistical analysis},
} 


@InProceedings{Rinard:2007:EarlyPhaseTermination,
  author = 	 {Martin Rinard},
  title = 	 {Using Early Phase Termination to Eliminate Load Imbalances at Barrier Synchronization Points},
  booktitle = {Proceedings of OOPSLA 2007},
  pages = 	 {369--386},
  year = 	 2007,
  month =        {October},
  address = 	 {Montreal, Quebec, Canada}}

@TechReport{hoffmann09:_using_code_perfor_improv_perfor,
  author = 	 {Henry Hoffmann and Sasa Misailovic and Stelios Sidiroglou and Anant Agarwal and Martin Rinard},
  title = 	 {Using Code Perforation to Improve Performance, Reduce Energy Consumption, and Respond to Failures},
  institution =  {MIT CSAIL},
  year = 	 2009,
  number = 	 {MIT-CSAIL-TR-2009-042},
  address = 	 {Cambridge, MA},
  month = 	 {September}}


@misc{gplus:concurrent,
    author = {Robert Love},
    title = {What is the ideal design for a server process in {Linux} that handles concurrent socket {I/O}},
    year = {2013},
    url = {https://plus.google.com/+RobertLove/posts/VPMT8ucAcFH},
    note = {Online; accessed 23-November-2015}
}

@misc{lttpd,
    author = {Lighty Team},
    title = {{Lighty 1.5.0 and Linux-aio}},
    year = {2006},
    url = {http://blog.lighttpd.net/articles/2006/11/12/lighty-1-5-0-and-linux-aio/},
    note = {Online; accessed 23-November-2015}
}

@misc{nod.js,
    author = {Travis Glines},
    title = {nod.js},
    year = {2011},
    url = {https://github.com/tglines/nodrr/blob/master/controllers/nod.js},
    note = {Online; accessed 23-November-2015}
}

@misc{valgrind:tools,
    author = {Valgind Developers},
    title = {Valgrind Tool Suite},
    year = {2015},
    url = {http://valgrind.org/info/tools.html},
    note = {Online; accessed 24-November-2015}
}

@misc{cachegrind,
    author = {Valgrind Developers},
    title = {Cachegrind: a cache and branch-prediction profiler},
    year = {2015},
    url = {http://valgrind.org/docs/manual/cg-manual.html},
    note = {Online; accessed 25-November-2015}
}

@misc{helgrind,
    author = {Valgrind Developers},
    title = {Helgrind: a thread error detector},
    year = {2015},
    url = {http://valgrind.org/docs/manual/hg-manual.html},
    note = {Online; accessed 25-November-2015}
}

@misc{massif,
    author = {Valgrind Developers},
    title = {Massif: a heap profiler},
    year = {2016},
    url = {http://valgrind.org/docs/manual/ms-manual.html},
    note = {Online; accessed 23-January-2016}
}

@misc{valgrind,
    author = {Valgrind Developers},
    title = {Valgrind Documentation},
    year = {2020},
    url = {https://www.valgrind.org/docs/manual/index.html},
    note = {Online; accessed 13-December-2020}
}


@misc{cppatomics,
    author = {{C++ Reference}},
    title = {std::memory\_order},
    year = {2015},
    url = {http://en.cppreference.com/w/cpp/atomic/memory\_order},
    note = {Online; accessed 6-December-2015}
}

@misc{bmref1,
    author = {Bartosz Milewski},
    title = {{C++} Atomics and Memory Ordering},
    year = {2008},
    url = {http://bartoszmilewski.com/2008/12/01/c-atomics-and-memory-ordering/}, 
    note = {Online; accessed 6-December-2015}
}

@misc{bmref2,
    author = {Bartosz Milewski},
    title = {The Inscrutable {C++} Memory Model},
    year = {2008},
    url = {http://bartoszmilewski.com/2008/12/23/the-inscrutable-c-memory-model/},
    note = {Online; accessed 6-December-2015}
}

@misc{cellperf,
    author = {Mike Acton},
    title = {Demystifying the Restrict Keyword},
    year = {2006},
    url = {http://cellperformance.beyond3d.com/articles/2006/05/demystifying-the-restrict-keyword.html},
    note = {Online; accessed 7-December-2015}
}

@misc{joel:functional,
    author = {Joel Spolsky},
    title = {The Perils of {JavaSchools}},
    year = {2005},
    url = {http://www.joelonsoftware.com/articles/ThePerilsofJavaSchools.html},
    note = {Online; accessed 8-December-2015}
}

@misc{tont:threadsafe,
    author = {Raymond Chen},
    title = {The difference between thread-safety and re-entrancy},
    year = {2004},
    url = {https://blogs.msdn.microsoft.com/oldnewthing/20040629-00/?p=38643/},
    note = {Online; accessed 8-December-2015}
}

@misc{autopar,
    author = {GNU Compiler Collection},
    title = {Automatic Parallelization in GCC},
    year = {2012},
    url = {https://gcc.gnu.org/wiki/AutoParInGCC},
    note = {Online; accessed 8-December-2015}
}

@misc{autopar:related,
    author = {GNU Compiler Collection},
    title = {Autopar's(in trunk) Algorithms},
    year = {2009},
    url = {https://gcc.gnu.org/wiki/AutoparRelated},
    note = {Online; accessed 8-December-2015}
}

@misc{omptutorial,
    author = {Blaise Barney},
    title = {{OpenMP}},
    year = {2015},
    url = {https://computing.llnl.gov/tutorials/openMP/},
    note = {Online; accessed 12-December-2015}
}

@misc{flush,
    author = {Michael Suess},
    title = {Please Don't Rely on Memory Barriers for Synchronization},
    year = {2007},
    url = {http://www.thinkingparallel.com/2007/02/19/please-dont-rely-on-memory-barriers-for-synchronization/},
    note = {Online; accessed 12-December-2015}
}

@misc{so:volatile,
    author = {Stack Exchange Inc.},
    title = {{Using C/Pthreads: do shared variables need to be volatile?}},
    year = {2008},
    url = {http://stackoverflow.com/questions/78172/using-c-pthreads-do-shared-variables-need-to-be-volatile},
    note = {Online; accessed 14-December-2015}
}

@misc{abba,
    author = {Abba},
    title = {Waterloo},
    year = {1974},
    url = {https://www.youtube.com/watch?v=Sj_9CiNkkn4},
    note = {Online; accessed 14-December-2015}
}

@misc{abaproblem,
    author = {Damian Dechev and Peter Pirkelbauer and Bjarne Stoustroup},
    title = {Understanding and Effectively Preventing the {ABA} Problem in Descriptor-based Lock-free Designs},
    year = {2010},
    url = {http://www.stroustrup.com/isorc2010.pdf},
    note = {Online; accessed 14-December-2015}
}

@article{snoopycache,
year={1988},
issn={0178-4617},
journal={Algorithmica},
volume={3},
number={1-4},
title={Competitive snoopy caching},
url={http://dx.doi.org/10.1007/BF01762111},
publisher={Springer-Verlag},
keywords={Shared-bus multiprocessors; Amortized analysis; Potential functions; Page replacement; Shared memory; Cache coherence},
author={Karlin, Anna R. and Manasse, Mark S. and Rudolph, Larry and Sleator, Daniel D.},
pages={79-119},
language={English}
}

@misc{pr:volatile,
    author = {Peter Ritchie},
    title = {volatile---You Keep Using That Word, But I Do Not Think You Know What It Means},
    year = {2013},
    url = {http://blog.peterritchie.com/?p=1091},
    note = {Online; accessed 15-December-2015}
}

@misc{quora:cppthr,
    author = {Robert Love},
    title = {How are the threading and memory models different in {C++} as compared to {C}?},
    year = {2014},
    url = {http://www.quora.com/C++-programming-language/How-are-the-threading-and-memory-models-different-in-C++-as-compared-to-C},
    note = {Online; accessed 16-December-2015}
}

@misc{cppconcurrency,
    author = {Hans J. Boehm and Sarita V. Adve},
    title = {Foundations of the {C++} Concurrency Memory Model},
    year = {2008},
    url = {http://rsim.cs.illinois.edu/Pubs/08PLDI.pdf},
    note = {Online; accessed 16-December-2015}
}

@misc{gcc:inlining,
    author = {{GNU Compiler Collection}},
    title = {An Inline Function is As Fast As a Macro},
    year = {2016},
    url = {https://gcc.gnu.org/onlinedocs/gcc/Inline.html},
    note = {Online; accessed 6-January-2016}
}

@misc{msdn:pgo,
    author = {Ankit Asthana},
    title = {Build faster and high performing native applications using {PGO}},
    year = {2013},
    url = {http://blogs.msdn.com/b/vcblog/archive/2013/04/04/how-to-build-faster-and-high-performing-native-applications-using-pgo.aspx},
    note = {Online; accessed 6-January-2016}
}

@misc{cudaguide,
    author = {{nVIDIA}},
    title = {{CUDA C Programming Guide, version 7.5}},
    year = {2015},
    url = {http://docs.nvidia.com/cuda/pdf/CUDA_C_Programming_Guide.pdf},
    note = {Online; accessed 6-January-2016}
}

@misc{amdguide,
    author = {{AMD}},
    title = {{AMD Accelerated Parallel Processing OpenCL Programming Guide, v.2.7}},
    year = {2013},
    url = {http://developer.amd.com/gpu/amdappsdk/assets/AMD_Accelerated_Parallel_Processing_OpenCL_Programming_Guide.pdf},
    note = {Online; accessed 6-January-2016}
}

@misc{cellprimer,
    author = {Sony Computer Entertainment},
    title = {Cell Programming Primer},
    year = {2008},
    url = {https://www.kernel.org/pub/linux/kernel/people/geoff/cell/ps3-linux-docs/CellProgrammingPrimer.html},
    note = {Online; accessed 6-January-2016}
}


@misc{scrypt,
    author = {Colin Percival},
    title = {Stronger Key Derivation via Sequential Memory-Hard Functions},
    year = {2009},
    url = {http://www.bsdcan.org/2009/schedule/attachments/87_scrypt.pdf},
    note = {Online; accessed 6-January-2016}
}

@misc{xkcd:security,
    author = {Randall Munroe},
    title = {{xkcd: Security}},
    url = {https://xkcd.com/538/},
    note = {Online; accessed 6-January-2016}
}

@misc{hpcmpi,
    author = {Jonathan Dursi},
    title = {{HPC is dying, and MPI is killing it}},
    year = {2015},
    url = {http://www.dursi.ca/hpc-is-dying-and-mpi-is-killing-it/},
    note = {Online; accessed 6-January-2016}
}

@misc{scalecost,
	author = {Frank McSherry},
	title = {Scalability! But at what {COST}?},
	year = {2015},
	url = {http://www.frankmcsherry.org/graph/scalability/cost/2015/01/15/COST.html},
	note = {Online; accessed 11-January-2016}
}

@misc{graphx,
	author = {Joseph E. Gonzalez and Reynold S. Xin and Ankur Dave and Daniel Crankshaw and Michael J. Franklin and Ion Stoica},
	title = {{GraphX}: Graph Processing in a Distributed Dataflow Framework},
	year = {2014},
	url = {https://www.usenix.org/system/files/conference/osdi14/osdi14-paper-gonzalez.pdf},
	note = {11th USENIX Symposium on Operating Systems Design and Implementation}
}

@misc{awsscale,
    author = {Todd Hoff},
    title = {{A Beginner's Guide To Scaling To 11 Million+ Users on Amazon's AWS}},
    year = {2016},
    url = {http://highscalability.com/blog/2016/1/11/a-beginners-guide-to-scaling-to-11-million-users-on-amazons.html},
    note = {Online; accessed 16-January-2016}
}

@misc{300ps,
    author = {Bryan Cantrill},
    title = {{Hidden in Plain Sight}},
    year = {2006},
    url = {http://queue.acm.org/detail.cfm?id=1117401},
    note = {Online; accessed 20-Janaury-2016}
}

@misc{lies,
    author = {Yossi Kreinin},
    title = {How profilers lie: the cases of gprof and {KCachegrind}},
    year = {2013},
    url = {http://yosefk.com/blog/how-profilers-lie-the-cases-of-gprof-and-kcachegrind.html},
    note = {Online; accessed 26-January-2016}
}

@misc{metrics,
    author = {Paul Khuong},
    title = {Performance Tuning ~ Writing an Essay},
    year = {2014},
    url = {http://www.pvk.ca/Blog/2014/10/19/performance-optimisation-~-writing-an-essay/},
    note = {Online; accessed 26-January-2016}
}

@misc{perf-tracing,
    author = {Dan Luu},
    title = {The {Nyquist} theorem and limitations of sampling profilers today, with glimpses of tracing tools from the future},
    year = {2016},
    url = {http://danluu.com/perf-tracing/},
    note = {Online; accessed 1-February-2016}
}

@misc{scout,
    author = {Andre},
    title = {UNDERSTANDING {Linux} {CPU} LOAD---WHEN SHOULD YOU BE WORRIED?},
    year = {2015},
    url = {http://blog.scoutapp.com/articles/2009/07/31/understanding-load-averages},
    note = {Online; accessed 13-Feburary-2016}
}

@misc{vmstat,
    author = {Brian K. Tanaka},
    title = {Monitoring {Virtual} {Memory} with vmstat},
    year = {2005},
    url = {http://www.linuxjournal.com/article/8178},
    note = {Online; accessed 13-February-2016}
}

@misc{sigman-little-law,
    author = {Karl Sigman},
    title = {Notes on {Little's} {Law}},
    year = {2009},
    url = {http://www.columbia.edu/~ks20/stochastic-I/stochastic-I-LL.pdf},
    note = {Online; accessed 4-April-2018}
}

@book{pmd,
    author = {Mor Harchol-Balter},
    title = {Performance Modeling and Design of Computer Systems},
    year = {2013},
    publisher = {Cambridge University Press},
    isbn = {978-1-107-02750-3}
}

@misc{williams-q,
	author = {Ken Williams},
	title = {{COMP755} Advanced Operating Systems: Queuing Theory},
	year = {2013},
	url = {http://williams.comp.ncat.edu/comp755/Q.pdf},
	note = {Online; accessed 9-March-2016}
}
	
@misc{williams-perf,
	author = {Ken Williams},
	title = {{COMP755} Advanced Operating Systems: Transaction Performance},
	year = {2013},
	url = {http://williams.comp.ncat.edu/comp755/PerfEvalSlidesQ.pdf},
	note = {Online; accessed 9-March-2016}
}
	
@misc{williams-calc,
	author = {Ken Williams},
	title = {{COMP755} Advanced Operating Systems: Calculating Service Times},
	year = {2013},
	url = {http://williams.comp.ncat.edu/comp755/CalculatingServiceTime.pdf},
	note = {Online; accessed 10-March-2016}
}

@misc{modern-hardware,
    author = {Cliff Click and Brian Goetz},
    title = {A Crash Course in Modern Hardware},
    year = {2010},
    url = {https://www.infoq.com/presentations/click-crash-course-modern-hardware},
    note = {Online; accessed 27-December-2016}
}

@article{cpudb,
author = {Danowitz, Andrew and Kelley, Kyle and Mao, James and Stevenson, John P. and Horowitz, Mark},
 title = {{CPU} {DB}: Recording  Microprocessor History},
 journal = {Queue},
 issue_date = {April 2012},
 volume = {10},
 number = {4},
 month = apr,
 year = {2012},
 issn = {1542-7730},
 pages = {10:10--10:27},
 articleno = {10},
 numpages = {18},
 url = {http://doi.acm.org/10.1145/2181796.2181798},
 acmid = {2181798},
 publisher = {ACM},
 address = {New York, NY, USA},
}

@misc{lpsw,
    author = {Crista Videira Lopes},
    title = {Laws of Performant Software},
    year = {2016},
    url = {http://tagide.com/blog/advice/laws-of-peformant-software/},
    note = {Online; accessed 28-December-2016}
}

@misc{perfculture,
    author = {Joe Duffy},
    title = {Performance Culture},
    year = {2016},
    url = {http://joeduffyblog.com/2016/04/10/performance-culture/},
    note = {Online; accessed 28-December-2016}
}

@misc{preopt,
    author = {Joe Duffy},
    title = {The 'premature optimization is evil' myth},
    year = {2010},
    url = {http://joeduffyblog.com/2010/09/06/the-premature-optimization-is-evil-myth/},
    note = {Online; accessed 2-January-2017}
}

@misc{pogo,
	author = {Ankit Asthana},
	title = {Building Faster Native Applications},
	year = {2013},
	url = {https://blogs.msdn.microsoft.com/vcblog/2013/04/04/build-faster-and-high-performing-native-applications-using-pgo/},
	note = {Online; accessed 8-January-2016}
}

@misc{pogo2,
	author = {Ankit Asthana},
	title = {Profile Guided Optimization},
	year = {2013},
	url = {http://nwcpp.org/talks/2013/ProfileGuidedOptimizationMarch21st.pptx},
	note = {Online; accessed 8-January-2016}
}

@misc{lockconvoys,
 author = {Sue Loh},
 title = {{Lock Convoys and How to Recognize Them}},
 year = {2005},
 url = {https://blogs.msdn.microsoft.com/sloh/2005/05/27/lock-convoys-and-how-to-recognize-them/},
 note = {Online; accessed 3-December-2017}
}

@misc{boxcar,
 author = {Larry Osterman},
 title = {So you need a worker thread pool...},
 year = {2004},
 url = {https://blogs.msdn.microsoft.com/larryosterman/2004/03/29/so-you-need-a-worker-thread-pool/},
 note = {Online; accessed 4-December-2017}
}

@misc{anticonvoy,
 author = {Joe Duffy},
 title = {{Anti-convoy locks in Windows Server 2003 SP1 and Windows Vista}},
 year = {2006},
 url = {http://joeduffyblog.com/2006/12/14/anticonvoy-locks-in-windows-server-2003-sp1-and-windows-vista/},
 note = {Online; accessed 5-December-2017}
}

@misc{nielsen93:_respon_times,
  author =    {Jakob Nielsen},
  title =     {Response Times: The 3 Important Limits},
  url = {https://www.nngroup.com/articles/response-times-3-important-limits/},
  month =     {January},
  year =      1993,
  note = {Online; accessed 5-December-2017}
}

@misc{nblfwf,
 author = {Anthony Williams},
 title = {Definitions of Non-blocking, Lock-free and Wait-free},
 year = {2010},
 url = {https://www.justsoftwaresolutions.co.uk/threading/non_blocking_lock_free_and_wait_free.html},
 note = {Online; accessed 9-December-2017}
}

@misc{branchprediction,
    author = {Dan Luu},
    title = {A history of branch prediction from 1500000 BC to 1995},
    year = {2017},
    url = {http://danluu.com/branch-prediction/},
    note = {Online; accessed 5-December-2017}
}


@article{LEMIRE20181,
title = "Stream {VByte}: Faster byte-oriented integer compression",
journal = "Information Processing Letters",
volume = "130",
number = "Supplement C",
pages = "1 - 6",
year = "2018",
issn = "0020-0190",
url = "http://www.sciencedirect.com/science/article/pii/S0020019017301679",
author = "Daniel Lemire and Nathan Kurz and Christoph Rupp",
keywords = "Data compression, Indexing, Vectorization, SIMD instructions, Algorithms"
}

@misc{hubicka14:_linkt_gcc,
 author = {Jan Hubi\v{c}ka},
 title = {Linktime optimization in {GCC}, part 1--brief history},
 year = 2014,
 url = {http://hubicka.blogspot.ca/2014/04/linktime-optimization-in-gcc-1-brief.html},
 note = {Online; accessed 22-December-2017}
}

@misc{hubicka15:_link_gcc,
 author = {Jan Hubi\v{c}ka},
 title = {Link time and inter-procedural optimization improvements in {GCC} 5},
 year = 2015,
 url = {http://hubicka.blogspot.ca/2015/04/GCC5-IPA-LTO-news.html},
 note = {Online; accessed 22-December-2017}
}

@misc{project17:_llvm_link_time_optim,
 author = {{LLVM Project}},
 title = {{LLVM} Link Time Optimization: Design and Implementation},
 year = 2017,
 url = {https://llvm.org/docs/LinkTimeOptimization.html},
 note = {Online; accessed 22-December-2017}
}

@misc{novillo09:_linkt,
 author = {{Diego Novillo}},
 title = {{LinkTimeOptimization}},
 year = 2009,
 url = {https://gcc.gnu.org/wiki/LinkTimeOptimization},
 note = {Online; accessed 22-December-2017}
}

@Misc{lemire18:_multic_simd,
  author =    {Daniel Lemire},
  title =     {Multicore versus {SIMD} instructions: the "fasta" case study},
  url = {https://lemire.me/blog/2018/01/02/multicore-versus-simd-instructions-the-fasta-case-study/},
  year =      2018,
  note =      {Online; accessed 03-January-2018}}

@article{Kocher2018spectre,
 author = {Kocher, Paul and Genkin, Daniel and Gruss, Daniel and Haas, Werner and Hamburg, Mike and Lipp, Moritz and Mangard, Stefan and Prescher, Thomas and Schwarz, Michael and Yarom, Yuval},
 title = {Spectre Attacks: Exploiting Speculative Execution},
 journal = {ArXiv e-prints},
 archivePrefix = "arXiv",
 eprint = {1801.01203},
 year = 2018,
 month = jan,
}

@article{Lipp2018meltdown,
 author = {Lipp, Moritz and Schwarz, Michael and Gruss, Daniel and Prescher, Thomas and Haas, Werner and Mangard, Stefan and Kocher, Paul and Genkin, Daniel and Yarom, Yuval and Hamburg, Mike},
 title = {Meltdown},
 journal = {ArXiv e-prints},
 archivePrefix = "arXiv",
 eprint = {1801.01207},
 year = 2018,
 month = jan,
}

@Misc{masters18:_what_meltd_spect,
  author =    {Jon Masters},
  title =     {What are {Meltdown} and {Spectre}? Here's what you need to know},
  month =     {January},
  year =      2018,
  note =      {Online; accessed 10-January-2018},
  url = {https://www.redhat.com/en/blog/what-are-meltdown-and-spectre-here%E2%80%99s-what-you-need-know}
}

@Misc{horn18:_readin,
  author =    {Jann Horn},
  title =     {Reading privileged memory with a side-channel },
  month =     {January},
  year =      2018,
  note =      {Online; accessed 10-January-2018},
  url = {https://googleprojectzero.blogspot.ca/2018/01/reading-privileged-memory-with-side.html}
}

@article{coppa2014input,
  title={Input-sensitive profiling},
  author={Coppa, Emilio and Demetrescu, Camil and Finocchi, Irene},
  journal={IEEE Transactions on Software Engineering},
  volume={40},
  number={12},
  pages={1185--1205},
  year={2014},
  publisher={IEEE}
}

@misc{curlmulti,
	author = {Clemens Gruber},
	title = {libcurl multi interface example},
	year = {2013},
	url = {https://gist.github.com/clemensg/4960504},
	note = {Online; accessed 30-October-2018}
}

@misc{portsmash,
    author = {Alejandro Cabrera Aldaya and Billy Bob Brumley and Sohaib ul Hassan and Cesar Pereida Garc\'ia and Nicola Tuveri},
    title = {Port Contention for Fun and Profit},
    howpublished = {Cryptology ePrint Archive, Report 2018/1060},
    year = {2018},
    url = {https://eprint.iacr.org/2018/1060},
}

@misc{falsesharing,
	author = {Gaetano Mendola},
	title = {False Sharing hits again!},
	year = {2008},
	url = {http://cpp-today.blogspot.com/2008/05/false-sharing-hits-again.html},
	note = {Online; accessed 7-December-2018}
}

@misc{rainbowtables,
	author = {Kestas Kuliukas},
	title = {How Rainbow Tables work},
	year = {2009},
	url = {http://kestas.kuliukas.com/RainbowTables/},
	note = {Online; accessed 17-December-2018}
}


@misc{grimm17:_paral_algor_stand_templ_librar,
    author = {Rainer Grimm},
    title = {Parallel Algorithms of the {Standard Template Library}},
    year = 2017,
    url = {http://www.modernescpp.com/index.php/parallel-algorithm-of-the-standard-template-library},
    note = {Online; accessed 3-January-2019}
}

@misc{grimm17:_c,
    author = {Rainer Grimm},
    title = {C++17: New Parallel Algorithms of the {Standard Template Library}},
    year = 2017,
    url = {http://www.modernescpp.com/index.php/component/jaggyblog/c-17-new-algorithm-of-the-standard-template-library},
    note = {Online; accessed 3-January-2019}
}

@misc{stm,
	author = {Nir Shavit and Dan Touitou},
	title = {Software Transactional Memory},
	year = {1995},
	url = {https://groups.csail.mit.edu/tds/papers/Shavit/ShavitTouitou-podc95.pdf},
	note = {Online; accessed 1-March-2019}
}

@inproceedings{Kell:2017:MCE:3133850.3133867,
 author = {Kell, Stephen},
 title = {Some Were Meant for {C}: The Endurance of an Unmanageable Language},
 booktitle = {Proceedings of the 2017 ACM SIGPLAN International Symposium on New Ideas, New Paradigms, and Reflections on Programming and Software},
 series = {Onward! 2017},
 year = {2017},
 isbn = {978-1-4503-5530-8},
 location = {Vancouver, BC, Canada},
 pages = {229--245},
 numpages = {17},
 url = {http://doi.acm.org/10.1145/3133850.3133867},
 doi = {10.1145/3133850.3133867},
 acmid = {3133867},
 publisher = {ACM},
 address = {New York, NY, USA},
 keywords = {managed languages, safety, systems programming, undefined behavior, virtual machine},
}

@Book{klabnik18:_rust_progr_languag,
  author = 	 {Steve Klabnik and Carol Nichols},
  title = 	 {The {Rust} {Programming} {Language}},
  publisher = 	 {No Starch Press},
  year = 	 2018,
  note = 	 {\url{https://doc.rust-lang.org/book/}}
  }

@misc{fisqrt,
  author = {Christian Plesner Hansen},
  title = {0x5f3759df},
  year = {2012},
  url = {http://h14s.p5r.org/2012/09/0x5f3759df.html},
  note = {Online; accessed 2019-11-06}
}

@misc{fisqrt2,
  author = {Christian Plesner Hansen},
  title = {0x5f3759df (appendix)},
  year = {2012},
  url = {http://h14s.p5r.org/2012/09/0x5f3759df-appendix.html},
  note = {Online; accessed 2019-11-06}
}

@misc{sse,
  author = {Tuomas Tonteri},
  title = {A practical guide to {SSE} {SIMD} with C++},
  year = {2009},
  url = {http://sci.tuomastonteri.fi/programming/sse},
  note = {Online; accessed 2019-12-08}
}

@misc{simd,
  author = {Bert Hubert},
  title = {Chapter 4. First code example using gcc vector support},
  year = {2004-2005},
  url = {https://berthub.eu/gcc-simd/example.html},
  note = {Online; accessed 2019-12-08}
}

@ARTICLE{bitcoin,
  author={Michael Bedford Taylor},
  journal={Computer},
  title={The Evolution of {Bitcoin} Hardware},
  year={2017},
  volume={50},
  number={9},
  pages={58-66},
  ISSN={1558-0814},
  month={}
}
 
@misc{netappcontainer,
  author = {Doug Chamberlain},
  title = {{Containers vs. Virtual Machines (VMs): What’s the Difference?}},
  year = {2018},
  url = {https://blog.netapp.com/blogs/containers-vs-vms/},
  note = {Online; accessed 2019-12-16}
}

@misc{goldilocks,
  author = {Ryan Pollock},
  title = {The search for the {Goldilocks} browser and why {Firefox} might be ``just right'' for you},
  year = {2017},
  url = {https://medium.com/mozilla-tech/the-search-for-the-goldilocks-browser-and-why-firefox-may-be-just-right-for-you-1f520506aa35},
  note = {Online; accessed 2019-12-18}
}

@misc{electrolysis,
  author = {Nick Nguyen},
  title = {The Best {Firefox} Ever},
  year = {2017},
  url = {https://blog.mozilla.org/blog/2017/06/13/faster-better-firefox/},
  note = {Online; accessed 2019-12-18}
}

@misc{rustdocs,
  author = {Steve Klabnik and Carol Nichols and Rust Community},
  title = {The {Rust} {Programming} {Language}},
  year = {2020},
  url = {https://doc.rust-lang.org/book/title-page.html},
  note = {Online; accessed 2020-09-12}
}

@misc{discord,
  author = {Jesse Howarth},
  title = {Why {Discord} is switching from {Go} to {Rust}},
  year = {2020},
  url = {https://blog.discord.com/why-discord-is-switching-from-go-to-rust-a190bbca2b1f},
  note = {Online; accessed 2020-09-12}
}

@misc{lockfreedom,
  author = {Aaron Turon},
  title = {Lock-freedom without garbage collection},
  year = {2015},
  url = {https://aturon.github.io/blog/2015/08/27/epoch/#lock-free-data-structures},
  note = {Online; accessed 2020-10-03}
}

@misc{weakvsstrong,
  author = {Jeff Preshing},
  title = {Weak vs. Strong Memory Models},
  year = {2012},
  url = {https://preshing.com/20120930/weak-vs-strong-memory-models/},
  note = {Online; accessed 2020-10-09}
}

@misc{weakbug,
  author = {Robert O'Callahan},
  title = {Diagnosing A Weak Memory Ordering Bug},
  year = {2018},
  url = {https://robert.ocallahan.org/2018/08/for-first-time-in-my-life-i-tracked.html},
  note = {Online; accessed 2020-10-09}
}

@InProceedings{astrauskas20:_how_progr_unsaf_rust,
  author = 	 {Vytautas Astrauskas and Christoph Matheja and Federico Poli and Peter Müller and Alexander J. Summers},
  title = 	 {How do Programmers use Unsafe {Rust}?},
  booktitle = {Proceedings of the ACM on Programming Languages},
  year = 	 2020,
  volume = 	 4,
  number = 	 "OOPSLA",
  month = 	 {November},
  articleno =    {136},
  note = 	 {\url{http://people.inf.ethz.ch/summersa/wiki/lib/exe/fetch.php?media=papers:unsafe-corpus.pdf}}}


@inproceedings{10.1145/277650.277725,
author = {Frigo, Matteo and Leiserson, Charles E. and Randall, Keith H.},
title = {The Implementation of the Cilk-5 Multithreaded Language},
year = {1998},
isbn = {0897919874},
publisher = {Association for Computing Machinery},
address = {New York, NY, USA},
url = {https://doi.org/10.1145/277650.277725},
doi = {10.1145/277650.277725},
abstract = {The fifth release of the multithreaded language Cilk uses a provably good "work-stealing" scheduling algorithm similar to the first system, but the language has been completely redesigned and the runtime system completely reengineered. The efficiency of the new implementation was aided by a clear strategy that arose from a theoretical analysis of the scheduling algorithm: concentrate on minimizing overheads that contribute to the work, even at the expense of overheads that contribute to the critical path. Although it may seem counterintuitive to move overheads onto the critical path, this "work-first" principle has led to a portable Cilk-5 implementation in which the typical cost of spawning a parallel thread is only between 2 and 6 times the cost of a C function call on a variety of contemporary machines. Many Cilk programs run on one processor with virtually no degradation compared to equivalent C programs. This paper describes how the work-first principle was exploited in the design of Cilk-5's compiler and its runtime system. In particular, we present Cilk-5's novel "two-clone" compilation strategy and its Dijkstra-like mutual-exclusion protocol for implementing the ready deque in the work-stealing scheduler.},
booktitle = {Proceedings of the ACM SIGPLAN 1998 Conference on Programming Language Design and Implementation},
pages = {212–223},
numpages = {12},
keywords = {multithreading, critical path, work, runtime system, programming language, parallel computing},
location = {Montreal, Quebec, Canada},
series = {PLDI '98}
}



@article{cilk,
author = {Frigo, Matteo and Leiserson, Charles E. and Randall, Keith H.},
title = {The Implementation of the Cilk-5 Multithreaded Language},
year = {1998},
issue_date = {May 1998},
publisher = {Association for Computing Machinery},
address = {New York, NY, USA},
volume = {33},
number = {5},
issn = {0362-1340},
url = {https://doi.org/10.1145/277652.277725},
doi = {10.1145/277652.277725},
journal = {SIGPLAN Not.},
month = may,
pages = {212–223},
numpages = {12},
}

@misc{cuda,
  author = {Nvidia Corporation},
  title = {CUDA C++ Programming Guide},
  year = {2020},
  url = {https://docs.nvidia.com/cuda/cuda-c-programming-guide/index.html},
  note = {Online; accessed 2020-10-15}
}

@misc{expbackoff,
  author = {Aeoncase},
  title = {Improve on exponential backoff},
  year = {2019},
  url = {https://www.aeoncase.com/blog/posts/improve-on-exponential-backoff/},
  note = {Online; accessed 2020-10-21}
}

@misc{rustflamegraph,
  author = {Adam Perry},
  title = {Rust Performance: A story featuring perf and flamegraph on Linux},
  year = {2016},
  url = {https://blog.anp.lol/rust/2016/07/24/profiling-rust-perf-flamegraph/},
  note = {Online; accessed 2020-11-01}
}

@Misc{nethercote20:_how_rust,
  author = 	 {Nicholas Nethercote},
  title = 	 {How to speed up the {Rust} compiler in 2020},
  month = 	 {Apr},
  year = 	 2020,
  note = 	 {Online; accessed 2020-11-04},
  url = {https://blog.mozilla.org/nnethercote/2020/04/24/how-to-speed-up-the-rust-compiler-in-2020/}
}

@Misc{nethercote19:_how_rust,
  author = 	 {Nicholas Nethercote},
  title = 	 {How to speed up the {Rust} compiler some more in 2019},
  month = 	 {Oct},
  year = 	 2019,
  note = 	 {Online; accessed 2020-11-04},
  url = {https://blog.mozilla.org/nnethercote/2019/10/11/how-to-speed-up-the-rust-compiler-some-more-in-2019/}
}

@Misc{nethercote19:_rust,
  author = 	 {Nicholas Nethercote},
  title = 	 {The {Rust} compiler is still getting faster},
  month = 	 {Jul},
  year = 	 2019,
  note = 	 {Online; accessed 2020-11-04},
  url = {https://blog.mozilla.org/nnethercote/2019/07/25/the-rust-compiler-is-still-getting-faster/}
}

@Misc{nethercote19b:_how_rust,
  author = 	 {Nicholas Nethercote},
  title = 	 {How to speed up the {Rust} compiler in 2019},
  month = 	 {Jul},
  year = 	 2019,
  note = 	 {Online; accessed 2020-11-04},
  url = {https://blog.mozilla.org/nnethercote/2019/07/17/how-to-speed-up-the-rust-compiler-in-2019/}
}


@Misc{nethercote16:_how_rust,
  author = 	 {Nicholas Nethercote},
  title = 	 {How to speed up the {Rust} compiler},
  month = 	 {Oct},
  year = 	 2016,
  note = 	 {Online; accessed 2020-11-06},
  url = {https://blog.mozilla.org/nnethercote/2016/10/14/how-to-speed-up-the-rust-compiler/}
}

@Misc{seward10:_fun_dhat,
  author = 	 {Julian Seward},
  title = 	 {Fun 'n' games with {DHAT}},
  month = 	 {Dec},
  year = 	 2010,
  note = 	 {Online; accessed 2020-11-06},
  url = {https://blog.mozilla.org/jseward/2010/12/05/fun-n-games-with-dhat/}
}

@misc{kafka,
  author = {Merrin Kurian},
  title = {{Why should anyone use Apache Kafka?}},
  year = {2020},
  url = {https://medium.com/swlh/why-should-anyone-use-apache-kafka-f2b632d0963c},
  note = {Online; accessed 2020-11-07}
}

@article{genetic,
  author = {Whitley, Darrell},
  year = {1998},
  month = {10},
  pages = {},
  title = {A Genetic Algorithm Tutorial},
  volume = {4},
  journal = {Statistics and Computing},
  doi = {10.1007/BF00175354}
}

@misc{escape,
  author = {Jakub Stransky},
  title = {{HotSpot JVM JIT optimisation techniques}},
  year = {2018},
  url = {https://jakubstransky.com/2018/08/28/hotspot-jvm-jit-optimisation-techniques/},
  note = {Online; accessed 2020-11-13}
}

@article{binaryrewriting,
  author = {Alexis Engelke and David Hildenbrand and Martin Schulz},
  year = {2019},
  title = {Optimizing Performance at Runtime Using Binary Rewriting},
  journal = {International Conference for High Performance Computing, Networking, Storage and Analysis},
}


@Misc{wilcox20:_target_featur_target_cpu_rust,
  author = 	 {Nick Wilcox},
  title = 	 {Target {Feature} vs {Target} {CPU} for {Rust}},
  month = 	 {July},
  year = 	 2020,
  url = {https://www.nickwilcox.com/blog/target_cpu_vs_target_feature/},
  note = {Online; accessed 2020-11-19}
}

@Book{nethercote20:_rust_perfor_book,
  author = 	 {Nicholas Nethercote and others},
  title = 	 {The Rust Performance Book},
  publisher = 	 {Self-published},
  year = 	 2020,
  url = {https://nnethercote.github.io/perf-book/},
  note = {Online; accessed 2020-11-24}
}

@Misc{micikevicius11:_local_memor_regis_spill,
  author =    {Paulius Micikevicius},
  title =     {Local Memory and Register Spilling},
  howpublished = {\url{https://developer.download.nvidia.com/CUDA/training/register_spilling.pdf}},
  year =      2011
}

@book{dsc, 
    author = {Abraham Silberschatz and Henry F. Korth and S. Sudarshan},
    title = {Database System Concepts, 6th Edition},
    year = {2011},
    isbn = {978-0-07-352332-3},
    publisher = {McGraw Hill}
}

@book{fds,
    author = {Ramez Elmasri and Shamkant B. Navathe},
    title = {Fundamentals of Database Systems, 6th Edition},
    year = {2011},
    isbn = {978-0-136-08620-8},
    publisher = {Addison-Wesley}
}

@misc{joinelim,
 author = {Lucas Eder},
 title = {{JOIN Elimination: An Essential Optimiser Feature for Advanced SQL Usage}},
 year = {2017},
 url = {https://blog.jooq.org/2017/09/01/join-elimination-an-essential-optimiser-feature-for-advanced-sql-usage/},
 note = {Online; accessed 2-September-2017}
}

@misc{sysdig,
  author = 	 {Crystal Morin},
  title = 	 {Sysdig TRT uncovers massive cryptomining operation leveraging GitHub Actions},
  month = 	 {October},
  year = 	 2022,
  url = {https://sysdig.com/blog/massive-cryptomining-operation-github-actions/},
  note = {Online; accessed 2022-10-29}
}

@book{usd,
    author = {Richard L. Sites},
    title = {Understanding Software Dynamics},
    year = {2021},
    isbn = {978-0137589739},
    publisher = {Addison-Wesley Professional}
}

@misc{dldisney,
  author = 	 {Kevin Perjurer},
  title = 	 {{Disney's FastPass: A Complicated History}},
  month = 	 {November},
  year = 	 2021,
  url = {https://www.youtube.com/watch?v=9yjZpBq1XBE},
  note = {Online; accessed 2022-11-29}
}

@inproceedings{coz,
author = {Curtsinger, Charlie and Berger, Emery D.},
title = {Coz: Finding Code That Counts with Causal Profiling},
year = {2015},
isbn = {9781450338349},
publisher = {Association for Computing Machinery},
address = {New York, NY, USA},
url = {https://doi.org/10.1145/2815400.2815409},
doi = {10.1145/2815400.2815409},
booktitle = {Proceedings of the 25th Symposium on Operating Systems Principles},
pages = {184-197},
numpages = {14},
location = {Monterey, California}
}